# TODO: Need to implement unique constraints,
#       however this requires resetting the service (i.e. deleting any rows on the db
#       that violate this uniqueness constraint (having two Communities named 'Cats'))
#       To reset, do: prisma reset

type Query {
  info: String!
  posts: [Post!]
  users: [User!]
  communities: [Community!]
  comments: [Comment!]
  userByHandle(username: String!) : User
  communityByName(name: String!) : Community
}

type Mutation {
  createNewPost(url: String!, description: String!, community: String!): Post!
  createNewCommunity(name: String!, category: String!, hasPosts: Boolean!, hasMessages: Boolean!, privacy: String!): Community!
  createNewComment(authorId: String!, postId: String!, content: String!) : Comment!
  signup(email: String!, password: String!, username: String!, firstName: String!, lastName: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  setCommunity(userId: String!, communityId: String!) : User
}

type Subscription {
  newPosts: Post
}

# Define schema based on Prisma DB relations

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  username: String!
  password: String!
  messages: [Message!]
  communities: [Community!]
  ownerOf: [Community!]! 
  comments: [Comment!]
  posts: [Post!]!
}

type AuthPayload {
  token: String
  user: User
}

type Community {
    id: ID!
    name: String!
    category: String!
    posts: [Post!]!
    hasPosts: Boolean!
    hasMessages: Boolean!
    privacy: String!
    users: [User!]
    owner: User!
}

type Post {
  id: ID!
  postedBy: User
  title: String!
  slug: String!
  content: String!
  community: Community!
  comments: [Comment!]
}

type Comment {
  id: ID!
  author: User!
  content: String!
  post: Post!
}

type Message {
    id: ID!
    sender: User!
    recip: String!
    content: String!
    community: Community!
}

